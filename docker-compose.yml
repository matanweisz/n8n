volumes:
  postgres_data:
  redis_data:
  n8n_main:
  n8n_webhook:

networks:
  n8n-network:
    driver: bridge
  shark:
    external: true

x-n8n: &service-n8n
  build:
    context: .
    dockerfile: Dockerfile
  user: root:root
  restart: unless-stopped
  networks:
    - n8n-network
    - shark
  environment:
    - N8N_DIAGNOSTICS_ENABLED=${N8N_DIAGNOSTICS_ENABLED}
    - N8N_METRICS=${N8N_METRICS}
    - N8N_METRICS_PREFIX=${N8N_METRICS_PREFIX}
    - N8N_LOG_LEVEL=${N8N_LOG_LEVEL}
    - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE}
    - N8N_USER_FOLDER=${N8N_USER_FOLDER}
    - N8N_SECURE_COOKIE=${N8N_SECURE_COOKIE}
    - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=${N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS}
    - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY} # You need to create your own encryption key
    - N8N_HOST=${N8N_HOST}
    - N8N_PROTOCOL=${N8N_PROTOCOL}
    - N8N_WEBHOOK=${N8N_WEBHOOK}
    - N8N_WEBHOOK_URL=${N8N_WEBHOOK_URL}
    - WEBHOOK_URL=${WEBHOOK_URL}
    - N8N_EDITOR_BASE_URL=${N8N_EDITOR_BASE_URL}
    # Queue mode config
    - EXECUTIONS_MODE=${EXECUTIONS_MODE}
    - QUEUE_BULL_REDIS_HOST=${QUEUE_BULL_REDIS_HOST}
    - QUEUE_HEALTH_CHECK_ACTIVE=${QUEUE_HEALTH_CHECK_ACTIVE}
    - N8N_QUEUE_BULL_GRACEFULSHUTDOWNTIMEOUT=${N8N_QUEUE_BULL_GRACEFULSHUTDOWNTIMEOUT}
    - N8N_GRACEFUL_SHUTDOWN_TIMEOUT=${N8N_GRACEFUL_SHUTDOWN_TIMEOUT}
    # DB config
    - DB_TYPE=${DB_TYPE}
    - DB_POSTGRESDB_HOST=${POSTGRES_HOST}
    - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    # Task Runner config
    - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=${OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS}
    - N8N_RUNNERS_AUTH_TOKEN=${N8N_RUNNERS_AUTH_TOKEN}
    - N8N_TASK_BROKER_URL=${N8N_TASK_BROKER_URL}
    - N8N_COMMAND_RESPONSE_URL=${N8N_COMMAND_RESPONSE_URL}
    - N8N_TASK_BROKER_PORT=${N8N_TASK_BROKER_PORT}
    - NODE_FUNCTION_ALLOW_EXTERNAL=ajv,ajv-formats,puppeteer
    - PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium

services:
  redis:
    image: redis:7-alpine
    restart: unless-stopped
#    ports:
#      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
    volumes:
      - redis_data:/data
    networks:
      - n8n-network

  postgres:
    image: postgres:17
    restart: unless-stopped
# PostgreSQL accessible only via internal Docker network
    # ports:
    #   - "5432:5432"  # Commented out for security - use docker exec for admin access
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=${PGDATA}
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
#      - POSTGRES_HOST=0.0.0.0 # Listen on all interfaces inside container
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - n8n-network
      - shark

  n8n:
    <<: *service-n8n
    ports:
      - "5678:5678"
      - "5679:5679"
    volumes:
      - n8n_main:/n8n
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - n8n-network
      - shark
    healthcheck:
      test: ["CMD", "node", "-v"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 60s

  n8n-webhook:
    <<: *service-n8n
    command: sh /webhook
    volumes:
      - n8n_webhook:/n8n
    depends_on:
      n8n:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - n8n-network

  n8n-worker:
    <<: *service-n8n
    stop_grace_period: 5m
    command: sh /worker
    volumes:
      - n8n_main:/n8n
    depends_on:
      n8n:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - n8n-network
      - shark
    healthcheck:
      test: ["CMD", "node", "-v"]
      interval: 5s
      timeout: 5s
      retries: 10
    deploy:
      replicas: 2


